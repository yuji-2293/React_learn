const sample: string = "ドチンコ"
console.log(sample)

// プリミティブ型（基本型)
// number型
let age: number = 23;
let a: number = 99.9;

// string型
let useName: string = "Alice";

// boolean((真偽値)型
let isActive: boolean = true;
let hasPermission :boolean = false;

// null型 undefind型 bigint型 symbol型
// 省略


// リテラル型
let direction: "left" | "right";
direction = "left";
direction = "top"; // 変数定義時の意図しない値が代入されたことで　←右の変数代入はエラーとなる

// ユニオン型
let id: string | number
id = "123";
id = 235;
id = true //trueはboolean型でstringやnumberではないため、エラーとなる

// 配列型
let number: number[] = [1, 2, 3, 4, 5];
let names: Array<string> = ["Alice", "Bob", "Charlie"];

console.log(number);
console.log(names);

// タプル型
let person: [string, number] = ["Alice", 24];
let another: [string, number] = [25, "Alice"]

// オブジェクト型
type User = {
    name: string;
    age: number;
    isAdmin?: boolean;
};

let use: User = { name: "Bob", age: 39 };

console.log(use);

// 型の使い方
//文字列型
let message: string = "Hello, TypeScript";
message = 123;  // これはエラー: number型はstring型に代入できない(messageは最初にstring型と定義しているため)

//数値型
const count: number = 32;
count = "42" //count は最初にnumberとして定義されているため、string型は代入できない

//真偽値(boolean)型の使い方
let Active: boolean = true;
// 以下は全てエラー、boolean型にstringもnumberも代入できない
Active = "true"
Active = 1


